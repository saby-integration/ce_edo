&НаКлиенте
Перем ЗакрытиеРазрешено;

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция АдресСтраницы()

	Если СтрокаHTML = "" Тогда
		//обОработка = РеквизитФормыВЗначение("Объект");
		//обОработка.ПолучитьМакет("Макет").ПолучитьТекст();
		строкаHTML = saby_ВызовСервера.ПолучитьАдресСервиса(Истина);
	КонецЕсли;
	
	Возврат строкаHTML;
	
КонецФункции // АдресСтраницы()

&НаСервереБезКонтекста
Функция DecodeXmlXdto(СтрокаXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаXML);
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Десериализовать объект из XML
	Возврат НовыйСериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции // DecodeXmlXdto(СтрокаXML)

&НаСервереБезКонтекста
Функция EncodeXdtoXml(ОбъектДляСериализации)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.УстановитьСтроку();
	// Создать сериализатор XDTO для глобальной фабрики XDTO
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	// Cериализовать объект в XML
	НовыйСериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДляСериализации, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции // EncodeXdtoXml(ОбъектДляСериализации)

&НаСервереБезКонтекста
Функция СсылкаПоУникальномуИдентификатору(ИмяМенеджера, СтрокаГУИД)

	спрМенеджер = Справочники[ИмяМенеджера];
	Если СтрДлина(СтрокаГУИД) = 36 Тогда
		Результат = спрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаГУИД));
	Иначе
		Результат = спрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // СсылкаПоУникальномуИдентификатору(ИмяМенеджера, СтрокаГУИД)

&НаСервереБезКонтекста
Функция ОбработатьМассивПредопределенных(МассивИменПредопределенных)
	
	Результат = Новый Массив;
	Для Каждого ИмяПредопределенного Из МассивИменПредопределенных Цикл
		Результат.Добавить(ПредопределенноеЗначение(ИмяПредопределенного));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьЗначениеПараметра(ЗначениеОбработчика)

	Если ЗначениеОбработчика.handler = "ПредопределенноеЗначение" Тогда
		ЗначениеОтбора = ОбработатьМассивПредопределенных(ЗначениеОбработчика.handlerParam);
	Иначе
		ЗначениеОтбора = Неопределено;
	КонецЕсли;
	
	ЗначениеОбработчика.Вставить("where", ЗначениеОтбора);

КонецПроцедуры // РазобратьОбработчикПараметра(ЗначениеОбработчика)

&НаСервере
Процедура ВыполнитьПослеПерехода()

	Команды.ОбновитьСтраницу.Подсказка = строкаHTML;

КонецПроцедуры // ОбновитьПослеПерехода()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтрокаHTML = Параметры.НачальнаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТипОД = ТипЗнч(Элементы.ПолеHTMLдокумента.Документ);
	Если ТипОД = Тип("COMОбъект") Тогда
		//IE
		РеквизитОбъектаДокумента = "parentWindow";
	ИначеЕсли ТипОД = Тип("ВнешнийОбъект") Тогда
		//WebKit
		РеквизитОбъектаДокумента = "defaultView";
	Иначе
		///Что-то пошло не так
		Отказ = Истина;
		ВызватьИсключение "Формирование отчета невозможно. Обновите версию платформы 1С! Неизвестный тип <"+ТипЗнч(Элементы.ПолеHTMLдокумента)+"> документа: <"+Строка(ТипОД)+">";
	КонецЕсли;
	
	СтрокаHTML = АдресСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		//Пользователь закрывет 1С. Не будем ему мешать
    ИначеЕсли ЗакрытиеРазрешено=Неопределено Тогда
        //Пользователь не разрешал закрывать отчет. Покажем запрос на закрытие
		ПоказатьВопрос(
          Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
          "Закрыть форму?", 
          РежимДиалогаВопрос.ДаНет);
        Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		//Пользователь согласился закрыть окно. Еще раз вызываем закрытие
		ЗакрытиеРазрешено = Истина;
		Закрыть();			
    КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПолеHTMLдокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементСобытия = ДанныеСобытия.Element;
	Если ЭлементСобытия["id"] = "toExtSys" Тогда
		Попытка
			ИмяДействия	= ЭлементСобытия.getAttribute("action");
			Параметр	= ЭлементСобытия.textContext; //Иногда можно брать из ЭлементСобытия.innerHTML;
			Если ИмяДействия = "XDTO_QUERY" Тогда
				//Получение результата запроса
				Результат = API_XDTO_QUERY(Параметр);
			ИначеЕсли ИмяДействия = "XDTO_SELECT" Тогда	
				//Выбрать значение фильтра
				Результат = API_XDTO_SELECT(Параметр);
			ИначеЕсли ИмяДействия = "ADDON_OPENFORM" Тогда
				//Открыть форму справочника, документа и т.п)
				Результат = API_ADDON_OPENFORM(Параметр);
			ИначеЕсли ИмяДействия = "XDTO_OPENURL" Тогда
				//Открыть в браузере страницу сайта СБИС заданному пути
				Результат = API_XDTO_OPENURL(Параметр);
			Иначе
				//Неизвестная команда. Что-то новое. Попробуем выполнить код по имени метода и параметру
				Команда = "API_" + ИмяДействия + "(Параметр)";
				Результат = Вычислить(Команда);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат) Тогда
				//Успешно выполнили действие. Отправим результат 
				#Если ВебКлиент Тогда
					Элементы.ПолеHTMLдокумента.Документ.domConnector.resolve(Результат);
				#Иначе
					Элементы.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].domConnector.resolve(Результат);
				#КонецЕсли
			КонецЕсли;
		Исключение
			Результат = ОписаниеОшибки();
			//Отказ
			#Если ВебКлиент Тогда
				Элементы.ПолеHTMLдокумента.Документ.domConnector.reject(Результат);
			#Иначе
				Элементы.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].domConnector.reject(Результат);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLдокументаДокументСформирован(Элемент)

	ВыполнитьПослеПерехода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницу(Команда)
	
	ТекСтраница = строкаHTML;
	строкаHTML = "";
	ОбновитьОтображениеДанных();
	строкаHTML = ?(ТекСтраница = "", АдресСтраницы(), ТекСтраница);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура строкаHTMLПриИзменении(Элемент)
	
	ОбновитьСтраницу(Элементы.ФормаОбновитьСтраницу);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	СтрокаHTML = Параметры.НачальнаяСтраница;
	ОбновитьСтраницу(Команда);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандHTMLОтчета

&НаСервереБезКонтекста
Функция API_XDTO_query(Параметры)
	
	ПараметрыВызова = DecodeXmlXdto(Параметры);
	ЗапросДанных = Новый Запрос;
	
	//Установка параметров запроса. Если значение является структурой, то тянем наборы параметров из нее с префиксом по имени ключа этой структуры
	Для Каждого ПараметрЗапроса Из ПараметрыВызова.where Цикл
		
		ИмяПараметра = ПараметрЗапроса.Ключ;
		
		Если ПараметрЗапроса.Значение.Свойство("handler") Тогда
			ОбработатьЗначениеПараметра(ПараметрЗапроса.Значение);
		КонецЕсли;	
		ЗначениеОтбора = ПараметрЗапроса.Значение.where;
		
		Если ТипЗнч(ЗначениеОтбора) = Тип("Структура") Тогда
			Для Каждого КлючОтбора Из ЗначениеОтбора Цикл
				_ИмяПараметра = ИмяПараметра + "_" + КлючОтбора.Ключ;
				ЗапросДанных.УстановитьПараметр(_ИмяПараметра, КлючОтбора.Значение);
			КонецЦикла;
		Иначе
			ЗапросДанных.УстановитьПараметр(ИмяПараметра, ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "";
	Если Не ПараметрыВызова.Свойство("query", ТекстЗапроса) Тогда
		ВызватьИсключение "Не получен текст запроса";
	КонецЕсли;
	//В полученном запросе для пагинации должно быть: отбор первых строк, без сортировки, присутствовать поле сортировки
	Если СтрНайти(ТекстЗапроса, "&КоличествоЗаписей") > 0 Тогда
		КоличествоНаСтранице = Число(ПараметрыВызова.limit);
		СдвигСтраницы = Число(ПараметрыВызова.offset);
		//В исходном запросе выбираем первые до нужной страницы включительно: (1 + offset) * limit
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоЗаписей",  Формат(КоличествоНаСтранице+СдвигСтраницы+1, "ЧГ="));
		//Из него выбираем 'limit' последних
		ПрологЗапроса = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (ВЫБРАТЬ ПЕРВЫЕ %1 * ИЗ (", Формат(КоличествоНаСтранице+1, "ЧГ="));
		
		ПолеСортировки = "title";
		ЭпилогЗапроса = СтрШаблон(" УПОРЯДОЧИТЬ ПО %1) КАК Результат УПОРЯДОЧИТЬ ПО %1 УБЫВ) КАК Результат УПОРЯДОЧИТЬ ПО %1", ПолеСортировки);
						
		ТекстЗапроса = ПрологЗапроса + ТекстЗапроса + ЭпилогЗапроса;
	КонецЕсли;
	ЗапросДанных.Текст = ТекстЗапроса;
	
	ТаблицаДанных = ЗапросДанных.Выполнить().Выгрузить();
	
	ОбъектДляСериализации = Новый Структура;
	НовСтруктура = Новый Структура;
	НовСтруктура.Вставить("rows", ТаблицаДанных);
	ОбъектДляСериализации.Вставить("result", НовСтруктура);
	
	Возврат EncodeXdtoXml(ОбъектДляСериализации);
	
КонецФункции

&НаКлиенте
Функция API_XDTO_SELECT(Параметры)
	
	ПараметрыВызова = DecodeXmlXdto(Параметры);
	Если ПараметрыВызова.Свойство("formName") Тогда
		ИмяФормыОбъекта = ПараметрыВызова.formName;
	Иначе
		//Не знаем такого фильтра
		Возврат Неопределено;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("API_XDTO_SELECTЗавершение", ЭтотОбъект);
	РезультатВыбора = ОткрытьФорму(ИмяФормыОбъекта,ПараметрыВызова,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Возврат Неопределено;
	
КонецФункции
&НаКлиенте
Функция API_XDTO_SELECTЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		//Вернем результат выбора
		ОбъектДляСериализации = Новый Структура("title, where", Строка(РезультатВыбора), РезультатВыбора);
		СтрокаСериализации = EncodeXdtoXml(ОбъектДляСериализации);
		#Если ВебКлиент Тогда
			Элементы.ПолеHTMLдокумента.Документ.domConnector.resolve(СтрокаСериализации);
		#Иначе
			Элементы.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].domConnector.resolve(СтрокаСериализации);
		#КонецЕсли
	Иначе
		//Ничего не выбрали. Отказ
		#Если ВебКлиент Тогда
			Элементы.ПолеHTMLдокумента.Документ.domConnector.reject(Параметры);
		#Иначе
			Элементы.ПолеHTMLдокумента.Документ[РеквизитОбъектаДокумента].domConnector.reject(Параметры);
		#КонецЕсли
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция API_ADDON_OPENFORM(Параметры)
	
	ПараметрыВызова = DecodeXmlXdto(Параметры);
	ИмяОткрываемой = ПараметрыВызова["form"];
	//Для Открытия веб-формы form_name="ВнешняяОбработка.ПолеHTML.Форма.ФормаХТМЛ", ref="http...ru"
	ОткрылиФорму = ОткрытьФорму(ИмяОткрываемой, ПараметрыВызова);
	Возврат EncodeXdtoXml(Новый Структура);
	
КонецФункции

&НаКлиенте
Функция API_XDTO_OPENURL(Параметры)
	
	ПараметрыВызова = DecodeXmlXdto(Параметры);
	Урл = saby_ВызовСервера.ПолучитьАдресСервиса(Истина)+ПараметрыВызова["url"];
	НачатьЗапускПриложения(Новый ОписаниеОповещения, Урл);
	Возврат EncodeXdtoXml(Новый Структура);
	
КонецФункции

#КонецОбласти

