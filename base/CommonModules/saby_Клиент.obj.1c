// Вызывается из обработчика события "ПриНачалеРаботыСистемы" модуля сеанса
//
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	//Проверим и отключим в случае необходимости СПАРК
	saby_ВызовСервера.ОтключитьСПАРК();
	//Подключим и настроим внешние обработки
	saby_ВызовСервера.УстановитьОбновитьВнешниеОбработки();
	//Проверим и создадим профиль доступа
	saby_ВызовСервера.ПроверитьСоздатьПрофильДоступа();

КонецПроцедуры // ПриНачалеРаботыСистемы()

// Открывает предопределенный вариант отчета.
//
// Параметры:
//  Вариант  - Структура - описание варианта отчета:
//     * ИмяОтчета           - Строка - имя отчета.
//     * КлючВарианта        - Строка - ключ варианта отчета.
//
Процедура ОткрытьВариантОтчета(Вариант, ПараметрКоманды=Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", Вариант.КлючВарианта);
	
	Уникальность = "Отчет." + Вариант.ИмяОтчета + "/КлючВарианта." + Вариант.КлючВарианта;
	
	ПараметрыОткрытия.Вставить("КлючПараметровПечати",        Уникальность);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	Если ПараметрКоманды <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ПараметрКоманды", ПараметрКоманды);
	КонецЕсли;

	ОткрытьФорму("Отчет." + Вариант.ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);
	
КонецПроцедуры

Процедура ИндикаторСБИСНажатие(ЭтаФорма, Контрагент, ИНН, СтандартнаяОбработка) Экспорт
	
	Если saby_ВызовСервера.ПолучитьБраузерКарточкиКомпании() = "Форма 1С" Тогда
		ОткрытьФорму("ОбщаяФорма.saby_ВебСтраницаСБИС",
			Новый Структура("Контрагент", Контрагент),
			ЭтаФорма, Строка(Контрагент) + "Карточка");
	Иначе
		СтандартнаяОбработка = Ложь;
		НачатьЗапускПриложения(Новый ОписаниеОповещения, saby_ВызовСервера.ПолучитьАдресСервиса(Истина)+"/contractor-innkpp/v1/" + ИНН + ПолучитьТикетДляТекущегоПользователя());
	КонецЕсли;

КонецПроцедуры

#Область СохраняемыеПараметрыСеанса

Процедура УстановитьПараметр(ИмяПараметра, ЗначениеПараметра)
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ЗначениеПараметра);
	Иначе
		ПараметрыПриложения[ИмяПараметра] = ЗначениеПараметра;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметр(ИмяПараметра) 
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ПараметрыПриложения[ИмяПараметра];
	КонецЕсли;
	
КонецФункции // ПолучитьИдентификаторСессии()

Процедура УстановитьИдентификаторСессииОнлайн(ИдентификаторСесии) 
	
	УстановитьПараметр("Онлайн.СБИС.ИдентификаторСессии", ИдентификаторСесии);
	
КонецПроцедуры

Функция ПолучитьИдентификаторСессииОнлайн() 
	
	Возврат ПолучитьПараметр("Онлайн.СБИС.ИдентификаторСессии");
	
КонецФункции // ПолучитьИдентификаторСессии()
	
#КонецОбласти

#Область СБИСЗапросыДанных
	
Функция АвторизоватьсяПоЛогинуПаролю(Логин, Пароль, ТекстОшибки,Отказ=Ложь) Экспорт 	
	
	РезультатЗапроса = saby_ВызовСервера.АвторизоватьсяПоЛогинуПаролю(Логин, Пароль, ТекстОшибки, Отказ);
	Результат = "";
	Если Не Отказ Тогда
		УстановитьИдентификаторСессииОнлайн(РезультатЗапроса);
	ИначеЕсли РезультатЗапроса.Свойство("error", Результат) Тогда
		Отказ = Истина;
		Если Результат.details = "Для входа введите полученный код подтверждения." Тогда
			Результат.message = "Требуется подтверждение действия";
			Результат.code = 303;
		КонецЕсли;
			ТекстОшибки = Результат.details;
	Иначе
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",100,"Не удалось авторизоваться по логину/паролю.","");
		ТекстОшибки = "Не удалось авторизоваться по логину/паролю.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьТикетДляТекущегоПользователя()
	
	// При каждом запросе получаем новый тикет
	РезультатЗапроса = saby_ВызовСервера.ПолучитьТикетПоИдентификаторуСессии(ПолучитьИдентификаторСессииОнлайн());
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") И РезультатЗапроса.Свойство("result") Тогда
		ТикетПоИдентификаторуСессии  = РезультатЗапроса["result"];
	Иначе
		ТикетПоИдентификаторуСессии = "";
	КонецЕсли;
	
	Возврат ТикетПоИдентификаторуСессии;
	
КонецФункции

Функция ПараметрТикетТекущегоПользователя() Экспорт
	
	Возврат "?nocheck=1&ticket=" + ПолучитьТикетДляТекущегоПользователя();
	
КонецФункции	

Процедура ПроверитьАвторизоваться(Знач Оповещение, Интерактивно = Истина) Экспорт

	ИдентификаторСессииОнлайн	= ПолучитьИдентификаторСессииОнлайн();
	//Если Не ЗначениеЗаполнено(ИдентификаторСессииАпи) Или Не ЗначениеЗаполнено(ИдентификаторСессииОнлайн) Тогда
	Если Не ЗначениеЗаполнено(ИдентификаторСессииОнлайн) Тогда
		Если Интерактивно Тогда
			//используем бесшовную авторизацию
			Отказ = Ложь;
			РезультатАвторизации = saby_ВызовСервера.АутентификацияАдминистратором(Отказ);
			Если Не Отказ Тогда
				УстановитьИдентификаторСессииОнлайн(РезультатАвторизации);
			Иначе
				Сообщить(РезультатАвторизации);
			КонецЕсли;
			ВыполнитьОбработкуОповещения(Оповещение, Не Отказ);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
	Иначе
		//Авторизация уже пройдена
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияИндикаторов(Форма, ИНН, Авторизованы, ДвеСтроки = Истина) Экспорт

	Элементы = Форма.Элементы;
	
	ГруппаСБИС = Элементы.Найти("ГруппаСБИСНадежность");
	Если ГруппаСБИС <> Неопределено Тогда
		ГруппаСБИС.Видимость = СокрЛП(ИНН) <> "";
	КонецЕсли;
	
	Если СокрЛП(ИНН) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементАвторизации = Элементы.Найти("ДекорацияПоказать");
	
	ЭлементАвторизации.Видимость = Истина;//Не Авторизованы;
	Если Авторизованы Тогда
		ТекстОшибки = "";
		Отказ = Ложь;
		Результат = saby_ВызовСервера.ПолучитьПоказателиНадежности(ИНН, ТекстОшибки, Отказ);
		Если Не Отказ Тогда
			Форма.Элементы.ГруппаСБИСНадежность.Видимость = Истина;
			ПолзунокПлюс = Окр(Результат.ПоложительныйРейтинг/100*6);
			ПолзунокМинус = 1;//Окр(-Результат.ОтрицательныйРейтинг/100*6);
			Форма.ПоложительныйРейтинг = ПолзунокПлюс;
			Форма.ОтрицательныйРейтинг = ПолзунокМинус;
			Форма.Элементы.ДекорацияИндикаторНадежности.Картинка = БиблиотекаКартинок["saby_Градусник"+Формат(ПолзунокПлюс*10+ПолзунокМинус, "ЧЦ=2; ЧВН=")];
		Иначе
			Форма.Элементы.ДекорацияИндикаторНадежности.Картинка = БиблиотекаКартинок["saby_Градусник00"];
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			ЭлементАвторизации.Заголовок = ТекстОшибки;
			//Сообщить("Не получена надежность контрагента по причине: " + ТекстОшибки, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	ЭлементАвторизации.Видимость = ТекстОшибки <> "";//Не Авторизованы;
	
КонецПроцедуры // ПолучитьТекстИндикатора(ИНН)

#КонецОбласти
