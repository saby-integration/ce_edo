
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПоказателиНадежности(КонтрагентИНН, ТекстОшибки, Отказ=Ложь) Экспорт 	
	
	ЭтоИНН = ТипЗнч(КонтрагентИНН) = Тип("Строка");
	ИНН = ПолучитьИННКонтрагента(ЭтоИНН, КонтрагентИНН);
	Результат = Неопределено;
	
	Если Не ЭтоИНН Тогда
		//Попробуем найти данные, ранее сохраненные в регистре
		УстановитьПривилегированныйРежим(Истина);	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	saby_НадежностьКонтрагентов.ПоложительныйРейтинг КАК ПоложительныйРейтинг,
			|	saby_НадежностьКонтрагентов.ОтрицательныйРейтинг КАК ОтрицательныйРейтинг,
			|	saby_НадежностьКонтрагентов.КритичноеСостояние КАК КритичноеСостояние,
			|	saby_НадежностьКонтрагентов.ДатаОбновления КАК ДатаОбновления
			|ИЗ
			|	РегистрСведений.saby_НадежностьКонтрагентов КАК saby_НадежностьКонтрагентов
			|ГДЕ
			|	saby_НадежностьКонтрагентов.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", КонтрагентИНН);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = Новый Структура("ПоложительныйРейтинг, ОтрицательныйРейтинг, КритичноеСостояние, ДатаОбновления");
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
			Отказ = Ложь;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	//Данные в регистре не нашли. Запросим онлайн
	Если Результат = Неопределено Тогда
		Если СокрЛП(ИНН) <> "" Тогда
			Соединение = ПолучитьСоединение(Ложь);
			ДопЗаголовки = Новый Соответствие;
			ДопЗаголовки.Вставить("X-SBISSessionID", ""+ПолучитьИдентификаторСессииОнлайн(Соединение));
			ЗапросСервису = ПолучитьHTTPЗапрос("Сервис", ДопЗаголовки);
			Результат = ПолучитьНадежностьКонтрагента(Соединение, ЗапросСервису, ИНН, ТекстОшибки);
			Отказ = Результат = Неопределено;
			Если Не Отказ И Не ЭтоИНН Тогда
				//Обновим запись в регистре актуальной информацией
				УстановитьПривилегированныйРежим(Истина);	
				НоваяЗапись = РегистрыСведений.saby_НадежностьКонтрагентов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Результат);
				НоваяЗапись.Контрагент = ПолучитьКонтрагентИНН(КонтрагентИНН);
				НоваяЗапись.Записать(Истина);
				УстановитьПривилегированныйРежим(Ложь);	
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#Область СлужебныеПроцедурыИФункции

#Область HTTPПротокол

Процедура ОбновитьДанныеСБИС() Экспорт
	
	Соединение = ПолучитьСоединение(Истина);//Ложь
	ИдентификаторСессии = ПолучитьИдентификаторСессииОнлайн(Соединение);
	
	Если ИдентификаторСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = saby_ВызовСервераПереопределяемый.ТекстЗапросаКонтрагентыДляОбновленияДанных();
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДата() - 3600*12); // Минус двенадцать часов от текущего момента
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		//Запрос данных
		ДопЗаголовки = Новый Соответствие;
		ДопЗаголовки.Вставить("X-SBISSessionID", ""+ПолучитьИдентификаторСессииОнлайн(Соединение));			
		ЗапросСервису = ПолучитьHTTPЗапрос("СППСЕРВИС", ДопЗаголовки);
		
		Выборка = РезультатЗапроса.Выбрать();
		МассивИНН = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивИНН.Добавить(СокрЛП(Выборка.ИНН));		
		КонецЦикла;	
		Если МассивИНН.Количество() > 0 Тогда
			ТекстОшибки = "";
			ДанныеКонтрагента = ПолучитьНадежностьКонтрагентов(Соединение, ЗапросСервису, МассивИНН, ТекстОшибки);
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИНН = СокрЛП(Выборка.ИНН);
			Контрагент = Выборка.Контрагент;
			//ТекстОшибки = "";
			//ДанныеКонтрагента = ПолучитьНадежностьКонтрагента(Соединение, ЗапросСервису, ИНН, ТекстОшибки);
			Если ТекстОшибки <> "" Тогда
				ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, , "Обновление данных контрагента по ИНН: <"+ИНН+">");
				Прервать;
			КонецЕсли;
			Если ДанныеКонтрагента.Свойство("inn"+ИНН) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДанныеКонтрагента.Свойство("inn"+ИНН) Тогда
				ДанныеКонтрагента["inn"+ИНН].Вставить("Контрагент", Выборка.Контрагент);		
				НоваяЗапись = РегистрыСведений.saby_НадежностьКонтрагентов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеКонтрагента["inn"+ИНН]);
				НоваяЗапись.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Успешно = ЗавершитьСессиюСбис(Соединение, ИдентификаторСессии);
	
КонецПроцедуры
	
Функция ПолучитьИдентификаторПриложения()
	
	ИдентификаторКонфигурации1С = saby_ВызовСервераПереопределяемый.ИдентификаторКонфигурации1С();
	ИмяРасширения = saby_ВызовСервераПереопределяемый.ИмяРасширения();
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя", ИмяРасширения));
	Если МассивРасширений.Количество() <> 1 Тогда
		ВызватьИсключение "Ошибка идентификации расширений. Необходимо обновление расширения СБИС";
	КонецЕсли;
	РасширениеТензор = МассивРасширений[0];
	МассивПодверсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасширениеТензор.Версия, ".");
	СИ = Новый СистемнаяИнформация;
	ИдПриложения = "1C_" + СИ.ВерсияПриложения + "_" + ИдентификаторКонфигурации1С + "_EXT_" + МассивПодверсий[0] + "." + МассивПодверсий[1];
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИдПриложения;

КонецФункции // ПолучитьИдентификаторПриложения()

Функция АдресСервера()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ХранилищеОбщихНастроек.Загрузить("sabyАдресСервера", , , "АвтобменСБИС");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции // ПолучитьПарольАпи()
	
Функция ПолучитьСоединение(АвторизацияОнлайн)

	Возврат	Новый HTTPСоединение(ПолучитьАдресСервиса(АвторизацияОнлайн, Ложь),443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
КонецФункции // ПолучитьСоединение(Это)

Функция СформироватьЗаголовкиЗапроса(ДополнительныеЗаголовки=Неопределено)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("User-Agent", ПолучитьИдентификаторПриложения());	
	Если ДополнительныеЗаголовки <> Неопределено Тогда
		Для Каждого ДопЗаголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(ДопЗаголовок.Ключ, ДопЗаголовок.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Заголовки;

КонецФункции // СформироватьЗаголовкиЗапроса(ДополнительныеЗаголовки = Неопределено)

Функция ЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса)
	
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+СтрЗаменить(Элемент.Значение, """", "\""")+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+ЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ТекстЗапроса = ТекстЗапроса+"{";				
					ТекстЗапроса = ТекстЗапроса+ЗаписатьПараметрыЗапроса(ЭлементМассива);
					ТекстЗапроса = ТекстЗапроса+"},";
				Иначе
					ТекстЗапроса = ТекстЗапроса+""""+строка(ЭлементМассива);
					ТекстЗапроса = ТекстЗапроса+""",";
				КонецЕсли;	
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапроса(Метод, СтруктураПараметровЗапроса=Неопределено, ПротоколЗапроса=4)
	ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":"""+Метод+""", ""protocol"": "+Формат(ПротоколЗапроса, "ЧГ=")+", ""params"":{";
	Если СтруктураПараметровЗапроса <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса+ЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"},""id"":1}";	
	ТекстЗапроса = СтрЗаменить(СтрЗаменить(ТекстЗапроса,Символы.ПС," "),Символы.ВК," ");
	Возврат ТекстЗапроса;	
КонецФункции

// Возвращает HTTPЗапрос со базовыми общими заголовками и списком дополнительных заголовков
// к нужному сервису
//
// Параметры:
//  РесурсЗапроса - Строка - определяет по какому адресу отправляется запрос и набор базовых заголовков:
//                "СПП" = "/spp-rest-api/service/"
//                "Авторизация" = "/auth/service/"
//                "Токен" = "/auth/service/"
//                "Выход" = "/auth/service/"
//                "Сервис" = "/service/"
//  ДополнительныеЗаголовки  - Структура - Заголовки, которые необходимо добавить в запрос помимо базовых общих
//
// Возвращаемое значение:
//  HTTPЗапрос    - с установленными заголовками и телом запроса
//
Функция ПолучитьHTTPЗапрос(РесурсЗапроса, ДополнительныеЗаголовки = Неопределено, ДополнительныеПараметры = Неопределено)

	АдресРесурса = "";
	СтрокаТелаЗапроса = "";
	Если ВРег(РесурсЗапроса) = "СПП" Тогда
		АдресРесурса = "/spp-rest-api/service/";
	ИначеЕсли ВРег(РесурсЗапроса) = "АВТОРИЗАЦИЯ" Тогда
		АдресРесурса = "/auth/service/";
		ПрефиксКоманды = "САП";
		Если ДополнительныеПараметры = Неопределено Тогда
			СтруктураПараметровЗапроса = Новый Структура("password, login", ПолучитьПарольАпи(), ПолучитьЛогинАпи())
		Иначе 
			СтруктураПараметровЗапроса = Новый Структура;
			СтруктураПараметровЗапроса.Вставить(?(ДополнительныеПараметры.АвторизацияОнлайн, "Логин", "login"), ДополнительныеПараметры.Логин);
			СтруктураПараметровЗапроса.Вставить(?(ДополнительныеПараметры.АвторизацияОнлайн, "Пароль", "password"), ДополнительныеПараметры.Пароль);
			Если ДополнительныеПараметры.АвторизацияОнлайн Тогда
				ПрефиксКоманды = "СБИС";
			КонецЕсли;
		КонецЕсли;
		СтрокаТелаЗапроса = СформироватьТекстЗапроса(ПрефиксКоманды+".Аутентифицировать", СтруктураПараметровЗапроса);
	ИначеЕсли ВРег(РесурсЗапроса) = "ТОКЕН" Тогда
		АдресРесурса = "/auth/service/";
		СтруктураПараметровЗапроса = Новый Структура;
		СтруктураПараметровЗапроса.Вставить("Params");
		СтруктураПараметровЗапроса.Вставить("Token", ДополнительныеПараметры);
		СтрокаТелаЗапроса = СформироватьТекстЗапроса("СБИС.ExternalAuth", СтруктураПараметровЗапроса);
	ИначеЕсли ВРег(РесурсЗапроса) = "ВЫХОД" Тогда
		АдресРесурса = "/auth/service/";
	ИначеЕсли ВРег(РесурсЗапроса) = "СЕРВИС" Тогда
		АдресРесурса = "/service/";
	ИначеЕсли ВРег(РесурсЗапроса) = "СППСЕРВИС" Тогда
		АдресРесурса = "/facade-spp/service/"
	ИначеЕсли ВРег(РесурсЗапроса) = "СЕРВИС1" Тогда
		АдресРесурса = "/service/?srv=1";
	КонецЕсли;
	
	ЗапросСервису = Новый HTTPЗапрос(АдресРесурса, СформироватьЗаголовкиЗапроса(ДополнительныеЗаголовки));
	
	Если СтрокаТелаЗапроса <> "" Тогда
		ЗапросСервису.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	КонецЕсли;
	
	Возврат ЗапросСервису;

КонецФункции // ПолучитьHTTPЗапрос()

#КонецОбласти

#Область Авторизация
	
Функция ПолучитьИдентификаторСессииАпи()
	
	//Установим соединение. Это заглушка без общих механизмов авторизации
	Соединение = ПолучитьСоединение(Ложь);
	ЗапросСервису = ПолучитьHTTPЗапрос("Авторизация");
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета, Истина);
	ИдентификаторСессии = ДанныеОтвета.Получить("result");
	Если ИдентификаторСессии = Неопределено Или ТипЗнч(ИдентификаторСессии) <> Тип("Строка") Тогда
		//Ошибка авторизации, не тот ответ пришел и т.п.
		Возврат Неопределено;
	Иначе
		Возврат ИдентификаторСессии;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторСессииОнлайн(Соединение = Неопределено)
	
	//Установим соединение. Это заглушка без общих механизмов авторизации
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(Истина);
	КонецЕсли;
	
	ЗапросСервису = ПолучитьHTTPЗапрос("Авторизация");
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета, Истина);
	ИдентификаторСессии = ДанныеОтвета.Получить("result");
	Если ИдентификаторСессии = Неопределено Или ТипЗнч(ИдентификаторСессии) <> Тип("Строка") Тогда
		//Ошибка авторизации, не тот ответ пришел и т.п.
		Возврат Неопределено;
	Иначе
		Возврат ИдентификаторСессии;
	КонецЕсли;
	
КонецФункции

функция СформироватьДанныеТекущегоПользователя()
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	ФизЛицо = ТекПользователь.ФизическоеЛицо;
	ДанныеСотрудника = Новый Структура("Сотрудник, Права", Новый Структура, Новый Структура("Роль", Новый Массив));
	ДанныеСотрудника.Сотрудник.Вставить("ИдентификаторИС", Строка(ФизЛицо.УникальныйИдентификатор()));
	Попытка
		Фамилия = ФизЛицо.Фамилия;
		Имя = ФизЛицо.Имя;
		Отчество = ФизЛицо.Отчество;
	Исключение
		ФИО = "ываыва ываыва ываыва";//сбисПолучитьФИОИзНазванияНаСервере(ФизЛицо.Наименование);
		Фамилия = ФИО.Фамилия;
		Имя = ФИО.Имя;
		Отчество = ФИО.Отчество;
	КонецПопытки;
	ДанныеСотрудника.Сотрудник.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Сотрудник.Вставить("Имя", Имя);
	ДанныеСотрудника.Сотрудник.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Сотрудник.Вставить("ДоступВСистему", "Да");	
	ДанныеСотрудника.Права.Роль.Добавить(Новый Структура("Название", ИмяПрофиляСбис()));
	
	Возврат ДанныеСотрудника;
	
КонецФункции

функция ЗавершитьСессиюСбис(Соединение, ИдентификаторСессии)
	
	ДопЗаголовки = Новый Соответствие;
	ДопЗаголовки.Вставить("X-SBISSessionID", ""+ИдентификаторСессии);
	ЗапросСервису = ПолучитьHTTPЗапрос("Выход", ДопЗаголовки);
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("СБИС.Выход"));

	Ответ = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	ОтветВозврат = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	Успешно = ОтветВозврат.Свойство("result") И ОтветВозврат.result = Неопределено;
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

// Проверяет наличие дополнительной обработки. Если ее нет, то создает новую
// из общего макета, шаблон имени которого "saby_Обработка_ИМЯОБРАБОТКИ"
//
// Параметры:
//  ИмяОбработки  - Строка - Имя искомой обработки
//                 Новая обработка создается под этим же именем
//  НаименованиеОбработки  - Строка - Наименование, присваиваемое создаваемой
//                 дополнительной обработке
//  ПодключитьКоманду  - Булево - Если Истина, то автоматически подлючается первая команда
//                 (см. описание внешней обработки в модуле объекта)
//
// Возвращаемое значение:
//   <СправочникОбъект.ДополнительныеОтчетыИОбработки>   - найденная или созданная дополнительная обработка
//
Функция УстановитьОбновитьВнешнююОбработку(ИмяОбработки, НаименованиеОбработки, ПодключитьКоманду)

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
					|	ДополнительныеОтчетыИОбработки.Публикация КАК Публикация,
					|	ДополнительныеОтчетыИОбработки.ХранилищеОбработки КАК ХранилищеОбработки
					|ИЗ
					|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
					|ГДЕ
					|	ДополнительныеОтчетыИОбработки.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка)
					|	И ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбработки
					|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяОбработки", ИмяОбработки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Можем проверить версию обработки
		ДопОбработка = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		//Установим обработку
		ДвоичныеДанные = ПолучитьОбщийМакет("saby_Обработка_"+ИмяОбработки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
		ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		ДопОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		ДопОбработка.Вид						= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		ДопОбработка.ИмяОбъекта					= ИмяОбработки;
		ДопОбработка.ИмяФайла					= ИмяОбработки + ".epf";
		ДопОбработка.Наименование				= НаименованиеОбработки;
		ДопОбработка.Ответственный				= Пользователи.ТекущийПользователь();
		ДопОбработка.Публикация					= Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		ДопОбработка.ХранилищеОбработки			= Новый ХранилищеЗначения(ДвоичныеДанные);
		
		СведенияОбОбработке = СведенияОРегламентнойОбработке(ИмяОбработки);
		ДопОбработка.БезопасныйРежим			= СведенияОбОбработке.БезопасныйРежим;
		ДопОбработка.Версия						= СведенияОбОбработке.ВерсияБСП;
		ДопОбработка.Комментарий				= СведенияОбОбработке.Информация;
		
		ДопОбработка.Команды.Загрузить(СведенияОбОбработке.Команды);
		Если ПодключитьКоманду Тогда
			ДопОбработка.Команды[0].ВариантЗапуска	= Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ДопОбработка.Команды[0].ВариантЗапуска	= Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		КонецЕсли;
		
		ДопОбработка.Записать();
		
	КонецЕсли;
	
	Возврат ДопОбработка;
	
КонецФункции // УстановитьОбновитьВнешнююОбработку(ИмяОбработки, НаименованиеОбработки, ПодключитьКоманду)

Функция ИмяОбработкиСБИС()

	Возврат "СБИС";

КонецФункции // ИмяОбработкиСБИС()

Функция ИмяРегламентнойОбработки()

	Возврат "РегламентныйОбменСБИС";

КонецФункции // ИмяРегламентнойОбработки()

Функция ИмяПрофиляСбис()

	Возврат "СБИС. Всё о компаниях и владельцах";

КонецФункции // ИмяПрофиляСбис()

Процедура ЗаписатьОшибкуВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса = Неопределено,
	ДополнительноеСобытие = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Сообщение);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса,
	ДополнительноеСобытие = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
	
	Если ИдентификаторСервиса = "Контрагент" Тогда
		Возврат НСтр("ru = 'Сервис данных единых гос_реестров'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ГосОрганы" Тогда
		Возврат НСтр("ru = 'Сервис данных гос_органов'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ПроверкаКонтрагентов" Тогда
		Возврат НСтр("ru = 'Проверка контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат НСтр("ru = 'СБИС контрагенты'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецФункции

Функция ДополнительноеСобытиеПолучениеДанных()
	
	Возврат НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПредложениеСЗаглавнойБуквы(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат ВРег(Лев(Строка, 1)) + НРег(Сред(Строка, 2))
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	РеквизитыОрганизации.Вставить("ИНН");
	РеквизитыОрганизации.Вставить("КПП");
	РеквизитыОрганизации.Вставить("Наименование");
	РеквизитыОрганизации.Вставить("НаименованиеПолное");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");
	РеквизитыОрганизации.Вставить("РегистрационныйНомер");
	РеквизитыОрганизации.Вставить("Статус", Неопределено);
	РеквизитыОрганизации.Вставить("РегистрирующийОрган", Неопределено);
	РеквизитыОрганизации.Вставить("КодОКВЭД");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ПравоваяФорма");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");
	РеквизитыОрганизации.Вставить("Телефон");
	РеквизитыОрганизации.Вставить("Руководитель");
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыОрганизации.Вставить("ДатаРегистрации");
	РеквизитыОрганизации.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыОрганизации.Вставить("РегистрацияВФСС");
	РеквизитыОрганизации.Вставить("КодОКВЭД");
	
	РеквизитыОрганизации.Вставить("ЭтоОКВЭД2", Ложь);
	
	РеквизитыОрганизации.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовЮридическогоЛица());
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыОрганизации;

КонецФункции

Функция НовыеРеквизитыПредпринимателя()

	РеквизитыПредпринимателя = Новый Структура;
	
	// Заполняется на основе данных ЕГРИП.
	РеквизитыПредпринимателя.Вставить("ИНН");
	РеквизитыПредпринимателя.Вставить("Наименование");
	РеквизитыПредпринимателя.Вставить("НаименованиеПолное");
	РеквизитыПредпринимателя.Вставить("НаименованиеСокращенное");
	РеквизитыПредпринимателя.Вставить("Фамилия");
	РеквизитыПредпринимателя.Вставить("Имя");
	РеквизитыПредпринимателя.Вставить("Отчество");
	РеквизитыПредпринимателя.Вставить("РегистрационныйНомер");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыПредпринимателя.Вставить("Пол");
	РеквизитыПредпринимателя.Вставить("КодСтраныГражданства");
	РеквизитыПредпринимателя.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыПредпринимателя.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыПредпринимателя.Вставить("РегистрацияВФСС");
	РеквизитыПредпринимателя.Вставить("ДатаРегистрации");
	РеквизитыПредпринимателя.Вставить("СвидетельствоОРегистрации");
	РеквизитыПредпринимателя.Вставить("КодОКВЭД");
	
	РеквизитыПредпринимателя.Вставить("ЭтоОКВЭД2", Ложь);
	
	РеквизитыПредпринимателя.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовПредпринимателя());
	
	РеквизитыПредпринимателя.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыПредпринимателя;

КонецФункции 

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("ОКТМО");
	Результат.Вставить("ОКАТО");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС");
	Результат.Вставить("КодПодчиненности");
	Результат.Вставить("КодОрганаФСС");
	Результат.Вставить("НаименованиеОрганаФСС");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеСтатуса()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"                , "");
	Результат.Вставить("Наименование"       , "");
	
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР");
	Результат.Вставить("КодОрганаПФР");
	Результат.Вставить("НаименованиеОрганаПФР");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеРегистрирующегоОргана()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность");
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("Представление");
	Результат.Вставить("ИНН");
	Результат.Вставить("ДатаЗаписи");
	Возврат Результат;

КонецФункции

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация");
	Результат.Вставить("Представление");
	Результат.Вставить("Комментарий");
	Возврат Результат;

КонецФункции

Функция АдресРФВерсия2(АдресСостав, АдресПредставление)
	
	АдресСтруктура = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	
	АдресСтруктура.ТипАдреса = "Административно-территориальный";
	
	АдресСтруктура.Страна = "РОССИЯ";
	АдресСтруктура.КодСтраны = "643";
	
	Если ЗначениеЗаполнено(АдресПредставление) Тогда
		АдресСтруктура.Представление = АдресПредставление;
	КонецЕсли;
	
	Если ТипЗнч(АдресСостав) = Тип("Соответствие") Тогда

		Если ЗначениеЗаполнено(АдресСостав["Zip-code"]) Тогда
			АдресСтруктура.Индекс = АдресСостав["Zip-code"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["Region"]) Тогда
			АдресСтруктура.Регион = АдресСостав["Region"]["name"];
			АдресСтруктура.КодРегиона = АдресСостав["Region"]["code"];
			АдресСтруктура.РегионТипКраткий = АдресСостав["Region"]["type"];
			АдресСтруктура.РегионТипПолный = ВРег(АдресСостав["Region"]["type"]);
			Если АдресСтруктура.РегионТипПолный = "ГОРОД" Тогда
				Сокращение  = "г";
				АдресСтруктура.ТипАдреса = "Муниципальный";
				АдресСтруктура.МуниципальноеПредставление = АдресСтруктура.Представление;
			ИначеЕсли АдресСтруктура.РегионТипПолный = "ОБЛАСТЬ" Тогда
				Сокращение  = "обл";
			ИначеЕсли АдресСтруктура.РегионТипПолный = "АВТОНОМНЫЙ ОКРУГ" Тогда
				Сокращение  = "АО";
			ИначеЕсли АдресСтруктура.РегионТипПолный = "АВТОНОМНАЯ ОБЛАСТЬ" Тогда
				Сокращение  = "Аобл";
			ИначеЕсли АдресСтруктура.РегионТипПолный = "КРАЙ" Тогда
				Сокращение  = "край";
			ИначеЕсли АдресСтруктура.РегионТипПолный = "РЕСПУБЛИКА" Тогда
				Сокращение  = "Респ";
			Иначе
				Сокращение  = "";
			КонецЕсли;
			АдресСтруктура.РегионСокращение = Сокращение;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["District"]) Тогда
			АдресСтруктура.Район = АдресСостав["District"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["Town"]) Тогда
			АдресСтруктура.Город = АдресСостав["Town"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["City"]) Тогда
			АдресСтруктура.НаселенныйПункт = АдресСостав["City"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["Street"]) Тогда
			АдресСтруктура.Улица = АдресСостав["Street"]["name"];
			АдресСтруктура.УлицаТипПолный = ВРег(АдресСостав["Street"]["type"]);
			Если АдресСтруктура.УлицаТипПолный = "УЛИЦА" Тогда
				Сокращение  = "ул";
			ИначеЕсли АдресСтруктура.УлицаТипПолный = "ПЕРЕУЛОК" Тогда
				Сокращение  = "пер";
			ИначеЕсли АдресСтруктура.УлицаТипПолный = "ПРОЕЗД" Тогда
				Сокращение  = "проезд";
			Иначе
				Сокращение  = "";
			КонецЕсли;
			АдресСтруктура.УлицаСокращение = Сокращение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСостав["House"]) Тогда
			АдресСтруктура.Здание.Номер = АдресСостав["House"];
			АдресСтруктура.Здание.ТипЗдания = "дом";
		КонецЕсли;
		
		СтроениеСтрокой = АдресСостав["Building"];
		Если ТипЗнч(СтроениеСтрокой) = Тип("Строка") И СтроениеСтрокой <> "" Тогда
			МассивСтроения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтроениеСтрокой, " ");
			Если МассивСтроения.Количество() = 2 Тогда
				Если СтрНайти("_КОРПУС_СТРОЕНИЕ_ЛИТЕРА_ЛИТЕР_СООРУЖЕНИЕ_УЧАСТОК_", "_"+МассивСтроения[0]+"_") > 0  Тогда
					ТипСтроения = МассивСтроения[0];
				КонецЕсли;
				НомерСтроения = МассивСтроения[1];
			Иначе
				ТипСтроения = "Корпус";
				НомерСтроения = СтроениеСтрокой;
			КонецЕсли;
			АдресСтруктура.Корпуса.Добавить(Новый Структура("ТипКорпуса, Тип, Номер", ТипСтроения, ТипСтроения, НомерСтроения));
		КонецЕсли;
		
		Если ТипЗнч(АдресСостав["Apartment"]) = Тип("Строка") И АдресСостав["Apartment"] <> "" Тогда
			АдресСтруктура.Помещения.Добавить(Новый Структура("ТипПомещения, Тип, Номер", "квартира", "квартира", АдресСостав["Apartment"]));
		КонецЕсли;
		
	КонецЕсли;
		
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		АдресСтруктура,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Если АдресСтруктура.ТипАдреса = "Административно-территориальный" Тогда
		Результат.Представление = АдресСтруктура.Представление;
	Иначе
		Результат.Представление = АдресСтруктура.МуниципальноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПолучениеДанныхКонтрагентов
	
Функция НайтиКонтрагентовПоНаименованию(Соединение, ЗапросСервису, Наименование, Количество=100)

	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("Contractor.Find", Новый Структура("requisites, page, size", СокрЛП(Наименование), "0", Формат(Количество, "ЧГ=")), 5));

	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	Возврат ПрочитатьJSON(ЧтениеОтвета, Истина);

КонецФункции // НайтиКонтрагентовПоНаименованию(Соединение, ЗапросСервису, Наименование, Количество=100)

Функция ПолучитьДанныеКонтрагента(Соединение, ЗапросСервису, ИНН)

	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("SppAPI.Requisites", Новый Структура("ogrn, inn", Неопределено, ИНН)));

	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	Возврат ПрочитатьJSON(ЧтениеОтвета, Истина);

КонецФункции // ПолучитьДанныеКонтрагента(Соединение, ЗапросСервису, ИНН)

Функция ПолучитьНадежностьКонтрагента(Соединение, ЗапросСервису, ИНН, ТекстОшибки="")
	
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("Reliability.GetReliabilityData", Новый Структура("spp_filter", Новый Структура("inn", ИНН))));
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Информация = Неопределено;
	Иначе
		ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
		Информация = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	КонецЕсли;
	
	Если Информация = Неопределено Тогда
		ТекстОшибки = "Данные не получены";
	ИначеЕсли Информация.Свойство("result") Тогда
		РезультатЗапроса = Информация.result;
		ПоложительныйРейтинг	= ?(РезультатЗапроса.Свойство("totalIndex_positive") И НЕ ТипЗнч(РезультатЗапроса.totalIndex_positive) = Тип("Неопределено")	, РезультатЗапроса.totalIndex_positive		, 0);
		ОтрицательныйРейтинг	= ?(РезультатЗапроса.Свойство("totalIndex_negative") И НЕ ТипЗнч(РезультатЗапроса.totalIndex_negative) = Тип("Неопределено")	, РезультатЗапроса.totalIndex_negative		, 0);
		КритичноеСостояние		= ?(РезультатЗапроса.Свойство("totalIndex_hasCritical")  И НЕ ТипЗнч(РезультатЗапроса.totalIndex_hasCritical) = Тип("Неопределено")	, РезультатЗапроса.totalIndex_hasCritical	, Ложь);
	Иначе
		Ошибка = Информация.Получить("error");
		Если Ошибка <> Неопределено Тогда
			СообщениеОбОшибке = Ошибка.Получить("message");
			Если Ошибка.Получить("type") = "error" Или (СообщениеОбОшибке = "У вас нет лицензии для выполнения запроса") Тогда
				ТекстОшибки = СообщениеОбОшибке;
			КонецЕсли;
		Иначе
			ТекстОшибки = "Ошибка получения данных о контрагенте.";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстОшибки = "" Тогда
		Результат = Новый Структура("ПоложительныйРейтинг, ОтрицательныйРейтинг, КритичноеСостояние, ДатаОбновления"); //Ресурсы РС
		Результат.ДатаОбновления = ТекущаяДата();
		Результат.ПоложительныйРейтинг = ПоложительныйРейтинг;
		Результат.ОтрицательныйРейтинг = -ОтрицательныйРейтинг; //Отрицательный рейтинг возвращается меньше нуля (-100-0)
		Результат.КритичноеСостояние = КритичноеСостояние;
	Иначе
		Результат = Неопределено;
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции // ПолучитьНадежностьКонтрагента(Соединение, ЗапросСервису, ИНН, ТекстОшибки)

Процедура ОбработатьТекстОтвета(ТекстОтвета, МассивИНН)
	СтрИНН = "";
	Для каждого ИНН из МассивИНН Цикл
		Если НЕ Найти(СтрИНН,ИНН) Тогда
			ТекстОтвета = СтрЗаменить(ТекстОтвета,ИНН,"inn"+ИНН);
		КонецЕсли;
		СтрИНН = СтрИНН+ ";" + ИНН;
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьНадежностьКонтрагентов(Соединение, ЗапросСервису, МассивИНН, ТекстОшибки="")
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("Reliability.GetReliabilityMassData", Новый Структура("inn_list", МассивИНН)));
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Информация = Неопределено;
	Иначе
		ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
		ОбработатьТекстОтвета(ТекстОтвета, МассивИНН); //json возвращает группировку по ИНН, а цифра не может быть ключем структуры
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
		Информация = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	КонецЕсли;
	СтруктураРезультат = Новый Структура;
		
	Если Информация = Неопределено Тогда
		ТекстОшибки = "Данные не получены";
	ИначеЕсли Информация.Свойство("result") Тогда
		Для каждого Элемент Из Информация.result Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				РезультатЗапроса = Элемент.Значение;
			Иначе
				РезультатЗапроса = Новый Структура;
			КонецЕсли;
			ПоложительныйРейтинг	= ?(РезультатЗапроса.Свойство("positive") И НЕ ТипЗнч(РезультатЗапроса.positive) = Тип("Неопределено")	, РезультатЗапроса.positive		, 0);
			ОтрицательныйРейтинг	= ?(РезультатЗапроса.Свойство("negative") И НЕ ТипЗнч(РезультатЗапроса.negative) = Тип("Неопределено")	, РезультатЗапроса.negative		, 0);
			КритичноеСостояние		= ?(РезультатЗапроса.Свойство("hasCritical")  И НЕ ТипЗнч(РезультатЗапроса.hasCritical) = Тип("Неопределено")	, РезультатЗапроса.hasCritical	, Ложь);
			
			Результат = Новый Структура("ИНН, ПоложительныйРейтинг, ОтрицательныйРейтинг, КритичноеСостояние, ДатаОбновления"); //Ресурсы РС
			Результат.ИНН = Сред(Элемент.Ключ,4,СтрДлина(Элемент.Ключ));
			Результат.ДатаОбновления = ТекущаяДата();
			Результат.ПоложительныйРейтинг = ПоложительныйРейтинг;
			Результат.ОтрицательныйРейтинг = -ОтрицательныйРейтинг; //Отрицательный рейтинг возвращается меньше нуля (-100-0)
			Результат.КритичноеСостояние = КритичноеСостояние;
			СтруктураРезультат.Вставить(Элемент.Ключ, Результат);
		КонецЦикла;	
	Иначе
		Ошибка = ?(Информация.Свойство("error"), Информация.error, Неопределено);
		Если Ошибка <> Неопределено Тогда
			СообщениеОбОшибке = ?(Ошибка.Свойство("message"), Ошибка.message, "");
			Если (Ошибка.Свойство("type") И Ошибка.type = "error") Или (СообщениеОбОшибке = "У вас нет лицензии для выполнения запроса") Тогда
				ТекстОшибки = СообщениеОбОшибке;
			КонецЕсли;
		Иначе
			ТекстОшибки = "Ошибка получения данных о контрагенте.";
		КонецЕсли;
	КонецЕсли;		
	
	Возврат СтруктураРезультат;
КонецФункции	

#КонецОбласти

#Область ИсторияРеквизитовЮридическогоЛица

Функция НовыйИсторияРеквизитовЮридическогоЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("КПП"               , НовыйТаблицаИсторияКПП());
	Результат.Вставить("Наименование"      , НовыйТаблицаИсторияНаименование());
	Результат.Вставить("Адрес"             , НовыйТаблицаИсторияАдрес());
	Результат.Вставить("Статус"            , НовыйТаблицаИсторияСтатус());
	Результат.Вставить("РеквизитыДиректора", НовыйТаблицаИсторияРеквизитыДиректора());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияКПП()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата"    , Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияНаименование()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                   , ТипДата);
	Результат.Колонки.Добавить("НаименованиеПолное"     , ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеСокращенное", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияАдрес()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КонтактнаяИнформация", ТипСтрока);
	Результат.Колонки.Добавить("Представление"       , ТипСтрока);
	Результат.Колонки.Добавить("Комментарий"         , ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияСтатус()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"        , ТипДата);
	Результат.Колонки.Добавить("Код"         , ТипСтрока);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияРеквизитыДиректора()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"         , ТипДата);
	Результат.Колонки.Добавить("ДатаОкончания", ТипДата);
	Результат.Колонки.Добавить("ИНН", ТипСтрока);
	Результат.Колонки.Добавить("Фамилия", ТипСтрока);
	Результат.Колонки.Добавить("Имя", ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	Результат.Колонки.Добавить("ВидДолжности", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеДолжности", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИсторияРеквизитовПредпринимателя

Функция НовыйИсторияРеквизитовПредпринимателя()
	
	Результат = Новый Структура;
	Результат.Вставить("ФИО"        , НовыйТаблицаИсторияФИО());
	Результат.Вставить("Гражданство", НовыйТаблицаИсторияГражданство());
	Результат.Вставить("ОГРН"       , НовыйТаблицаИсторияОГРНПредпринимателя());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияФИО()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Фамилия" , ТипСтрока);
	Результат.Колонки.Добавить("Имя"     , ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияГражданство()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КодСтраныГражданства", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияОГРНПредпринимателя()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Значение", ТипСтрока);
	Результат.Колонки.Добавить("ВидПредпринимателя");
	Результат.Колонки.Добавить("Статус");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияВидПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияСтатусПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПолучитьЛогинАпи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ХранилищеОбщихНастроек.Загрузить("sabyЛогинАпи", , , "АвтобменСБИС");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции // ПолучитьЛогинАпи()

Функция ПолучитьПарольАпи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ХранилищеОбщихНастроек.Загрузить("sabyПарольАпи", , , "АвтобменСБИС");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции // ПолучитьПарольАпи()
	
Функция ПолучитьТипИспользуемыхОтчетов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("sabyТипОтчетов", , , "АвтобменСБИС");
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = "СБИС";
	КонецЕсли;
	Возврат ЗначениеНастройки;
	
КонецФункции // ПолучитьПарольАпи()
	
Функция ПолучитьБраузерКарточкиКомпании() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("sabyБраузер", , , "АвтобменСБИС");
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = "Внешний";
	КонецЕсли;
	Возврат ЗначениеНастройки;
	
КонецФункции // ПолучитьПарольАпи()
	
// Возвращает адрес сервиса по параметру.
//
// Параметры:
// АвторизацияОнлайн  - Булево - Истина = online.sbis.ru
//                               Ложь = api.sbis.ru
//
// Возвращаемое значение:
//   Строка   - адрес сервиса, к которому выполняется подключение
//
Функция ПолучитьАдресСервиса(СерверOnline, ДобавитьПротокол = Истина) Экспорт

	Результат = ?(ДобавитьПротокол, "https://", "") + АдресСервера();
	Если Не СерверOnline Тогда
		Результат = СтрЗаменить(Результат, "online", "api");
	КонецЕсли;
	Возврат Результат;

КонецФункции // АдресСервиса(АвторизацияОнлайн)

// Возвращает тикет по идентификатору сессии для начала работы в текущей сессии на другом устройстве/программе
//
// Параметры:
//  ИдентификаторСессии  - Строка - идентификатор сессии, для которой нужно
//                 получить тикет
//
// Возвращаемое значение:
//   Структура		- в поле "result" содержится полученный тикет
//   Неопределено	- ошибка при получении данных
Функция ПолучитьТикетПоИдентификаторуСессии(ИдентификаторСессии) Экспорт

	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Соединение = ПолучитьСоединение(Истина);
	ДопЗаголовки = Новый Соответствие;
	ДопЗаголовки.Вставить("X-SBISSessionID", ""+ИдентификаторСессии);
	ЗапросСервису = ПолучитьHTTPЗапрос("Сервис", ДопЗаголовки);
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("САП.GetTicketForCurrentSid"));

	Ответ = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	Возврат ПрочитатьJSON(ЧтениеОтвета, Ложь);
	
КонецФункции // ПолучитьТикетПользователя()

Функция ПолучитьРеквизитыПоИНН(ИНН, Соединение, ЗапросСервису, Реквизиты)

	Реквизиты.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	//Запрос данных
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(Ложь);
	КонецЕсли;
	Если ЗапросСервису = Неопределено Тогда
		ИдентификаторСессии = ПолучитьИдентификаторСессииАпи();
		Если ИдентификаторСессии = Неопределено Тогда
			Реквизиты.ОписаниеОшибки = "Ошибка авторизации администратора СБИС. Проверьте настройки в разделе ""Администрирование - Интернет поддержка и сервисы";
			Возврат Неопределено;
		КонецЕсли;
		ЗапросСервису = ПолучитьHTTPЗапрос("СПП", Новый Структура("Cookie", "sid="+ИдентификаторСессии));
	КонецЕсли;
	
	ДанныеКонтрагента = ПолучитьДанныеКонтрагента(Соединение, ЗапросСервису, ИНН);//ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
	Если ТипЗнч(ДанныеКонтрагента) <> Тип("Соответствие") Тогда
			Реквизиты.ОписаниеОшибки = "Ошибка получения данных СБИС. Заполнение реквизитов невозможно.";
			Возврат Реквизиты;
	КонецЕсли;
	Результат = ДанныеКонтрагента.Получить("result");
	Если Результат = Неопределено Тогда
		ДанныеОшибки = ДанныеКонтрагента.Получить("error");
		Если ДанныеОшибки <> Неопределено Тогда
			Реквизиты.ОписаниеОшибки = ДанныеОшибки.Получить("message");
		Иначе
			Реквизиты.ОписаниеОшибки = "Ошибка получения данных СБИС. Заполнение реквизитов невозможно.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		

КонецФункции // ПолучитьРеквизитыПоИНН(ИНН, Соединение, ЗапросСевису)()

//Вместо РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН	
Функция РеквизитыЮридическогоЛицаПоИНН(Знач ИНН, Соединение = Неопределено, ЗапросСервису = Неопределено) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизации = НовыеРеквизитыЮридическогоЛица();
	Результат = ПолучитьРеквизитыПоИНН(ИНН, Соединение, ЗапросСервису, РеквизитыОрганизации);
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизации;
	КонецЕсли;
	
	БазовыеРеквизиты = Результат.Получить("BaseRequisites");
	РеквизитыОрганизации.РегистрационныйНомер		= БазовыеРеквизиты.Получить("OGRN");
	РеквизитыОрганизации.КПП						= БазовыеРеквизиты.Получить("KPP");
	ДатаСтрокой = БазовыеРеквизиты.Получить("DateRegistration");
	Если ДатаСтрокой <> Неопределено Тогда
		МассивДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДатаСтрокой, "-", Истина);
		РеквизитыОрганизации.ДатаРегистрации		= Дата(Число(МассивДаты[0]), Число(МассивДаты[1]), Число(МассивДаты[2]));
	КонецЕсли;
	РеквизитыОрганизации.Наименование				= БазовыеРеквизиты.Получить("Name");
	РеквизитыОрганизации.НаименованиеПолное			= БазовыеРеквизиты.Получить("FullName");
	РеквизитыОрганизации.НаименованиеСокращенное	= БазовыеРеквизиты.Получить("Name");
	РеквизитыОрганизации.ПравоваяФорма				= БазовыеРеквизиты.Получить("LegalForm");
	АдресныеСокращения = Неопределено;
	
	РеквизитыОрганизации.КодОКВЭД = БазовыеРеквизиты.Получить("OKVED");
	
	РеквизитыОрганизации.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
	РеквизитыОрганизации.РегистрацияВНалоговомОргане.Наименование    = БазовыеРеквизиты.Получить("RegistrationOrgan");
	РеквизитыОрганизации.РегистрацияВНалоговомОргане.ДатаРегистрации = БазовыеРеквизиты.Получить("DateRegistration");
	
	СвАдрес = БазовыеРеквизиты.Получить("Address");
	
	РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
	РегистрационныйНомерПФР = БазовыеРеквизиты.Получить("RegNumberPF");
	РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
		Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
	РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
	
	РеквизитыОрганизации.РегистрацияВПенсионномФонде = РегистрацияВПФР;
	
	РегистрационныйНомерФСС = БазовыеРеквизиты.Получить("RegNumberFSS");
	РегистрацияВФСС = НоваяРегистрацияВФСС();
	Если СтрДлина(РегистрационныйНомерФСС) <= 10 Тогда
		РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(РегистрационныйНомерФСС);
		РегистрацияВФСС.КодПодчиненности        = "";
	Иначе
		РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(РегистрационныйНомерФСС, 10));
		РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(РегистрационныйНомерФСС, 11));
		Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
			РегистрацияВФСС.КодПодчиненности = "";
		КонецЕсли;
	КонецЕсли;
	
	
	РеквизитыОрганизации.РегистрацияВФСС = РегистрацияВФСС;
	
	РеквизитыОрганизации.ЮридическийАдрес = АдресРФВерсия2(БазовыеРеквизиты.Получить("ExtraAddress"), БазовыеРеквизиты.Получить("Address"));
	РеквизитыОрганизации.ЮридическийАдрес.Вставить("Корректный", Истина);
	
	РуководительФИО = БазовыеРеквизиты.Получить("DirectorName");
	Должность = БазовыеРеквизиты.Получить("DirectorPosition");
	Если РуководительФИО <> Неопределено Тогда
		// Руководитель
		СтруктураКИ = НовоеКонтактноеЛицо();
		СтруктураКИ.Фамилия    = ТРег(РуководительФИО.Получить("Surname"));
		СтруктураКИ.Имя        = ТРег(РуководительФИО.Получить("Name"));
		СтруктураКИ.Отчество   = ТРег(РуководительФИО.Получить("Patronymic"));
		СтруктураКИ.Должность  = ПредложениеСЗаглавнойБуквы(Должность);
		СтруктураКИ.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 %3'"),
			СтруктураКИ.Фамилия,
			СтруктураКИ.Имя,
			СтруктураКИ.Отчество));
		
		РеквизитыОрганизации.Руководитель = СтруктураКИ;
	КонецЕсли;


	СтатусСтруктура = НовыйДанныеСтатуса();
	СтатусСтруктура.Код = "State";
	
	РеквизитыОрганизации.РегистрирующийОрган				= НовыйДанныеРегистрирующегоОргана();
	РеквизитыОрганизации.РегистрирующийОрган.Наименование	= БазовыеРеквизиты.Получить("NameOfRegistrationAuthority");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

//Вместо РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН	
Функция РеквизитыПредпринимателяПоИНН(Знач ИНН, Соединение = Неопределено, ЗапросСервису = Неопределено) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыПредпринимателя = НовыеРеквизитыПредпринимателя();
	РеквизитыПредпринимателя.ИНН = ИНН;
	
	Результат = ПолучитьРеквизитыПоИНН(ИНН, Соединение, ЗапросСервису, РеквизитыПредпринимателя);
	Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
		Возврат РеквизитыПредпринимателя;
	КонецЕсли;
		
	БазовыеРеквизиты = Результат.Получить("BaseRequisites");
	БазовыеРеквизиты.Получить("OGRN");
	РуководительФИО = БазовыеРеквизиты.Получить("DirectorName");
	РеквизитыПредпринимателя.Фамилия  = ТРег(РуководительФИО.Получить("Surname"));
	РеквизитыПредпринимателя.Имя      = ТРег(РуководительФИО.Получить("Name"));
	РеквизитыПредпринимателя.Отчество = ТРег(РуководительФИО.Получить("Patronymic"));
	//РеквизитыПредпринимателя.Пол      = Ответ.РеквизитыИП.СвФЛ.Пол;
	ВидИП                             = БазовыеРеквизиты.Получить("LegalForm");
	
	РеквизитыПредпринимателя.КодОКВЭД = БазовыеРеквизиты.Получить("OKVED");
	
	РеквизитыПредпринимателя.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
	//Реквизиты.РегистрацияВНалоговомОргане.Код             = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
	РеквизитыПредпринимателя.РегистрацияВНалоговомОргане.Наименование    = БазовыеРеквизиты.Получить("RegistrationOrgan");
	РеквизитыПредпринимателя.РегистрацияВНалоговомОргане.ДатаРегистрации = БазовыеРеквизиты.Получить("DateRegistration");
	
	РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
	РегистрационныйНомерПФР = БазовыеРеквизиты.Получить("RegNumberPF");
	РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
		Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
	РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
	РеквизитыПредпринимателя.РегистрацияВПенсионномФонде = РегистрацияВПФР;
	
	РегистрационныйНомерФСС = БазовыеРеквизиты.Получить("RegNumberFSS");
	РегистрацияВФСС = НоваяРегистрацияВФСС();
	Если СтрДлина(РегистрационныйНомерФСС) <= 10 Тогда
		РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(РегистрационныйНомерФСС);
		РегистрацияВФСС.КодПодчиненности        = "";
	Иначе
		РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(РегистрационныйНомерФСС, 10));
		РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(РегистрационныйНомерФСС, 11));
		Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
			РегистрацияВФСС.КодПодчиненности = "";
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыПредпринимателя.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		РеквизитыПредпринимателя.Фамилия,
		РеквизитыПредпринимателя.Имя,
		РеквизитыПредпринимателя.Отчество);
	
	Если ВидИП = НСтр("ru = 'Индивидуальный предприниматель'") Тогда
		РеквизитыПредпринимателя.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1'"),
			РеквизитыПредпринимателя.Наименование);
		РеквизитыПредпринимателя.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1'"),
			РеквизитыПредпринимателя.Наименование);
	Иначе
		РеквизитыПредпринимателя.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1 %2'"),
			ВидИП,
			РеквизитыПредпринимателя.Наименование);
		РеквизитыПредпринимателя.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1 %2'"),
			ВидИП,
			РеквизитыПредпринимателя.Наименование);
	КонецЕсли;
	
	РеквизитыПредпринимателя.РегистрационныйНомер = БазовыеРеквизиты.Получить("OGRNIP");
	
	РеквизитыПредпринимателя.ДатаРегистрации = БазовыеРеквизиты.Получить("DateRegistration");

	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыПредпринимателя;
	
КонецФункции

// Возвращают основные реквизиты юридических лиц по данным ЕГРЮЛ, подходящих по условиям поиска по наименованию.
//
// Параметры:
//	Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ.
//	КодРегиона - Строка, 2 - код региона в юридическом адресе для поиска в ЕГРЮЛ.
//	Адрес - Строка - одно или несколько слов из юридического адреса (от региона до улицы) для поиска в ЕГРЮЛ.
//
// Возвращаемое значение:
//	Структура - реквизиты найденных юридических лиц. Содержание структуры: 
//		* РеквизитыОрганизаций - Массив - реквизиты найденных контрагентов.
//			Если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20.
//			Элементы массива - Структура с полями:
//			** ИНН - Строка - ИНН юридического лица.
//			** Наименование - Строка - наименование юридического лица.
//			** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса.
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//				*** Комментарий - Строка - произвольный комментарий.
//			** Руководитель - Структура, Неопределено - данные о руководителе.
//				*** Должность - Строка - должность руководителя.
//				*** Фамилия - Строка - фамилия руководителя.
//				*** Имя - Строка - имя руководителя.
//				*** Отчество - Строка - отчество руководителя.
//				*** Представление - Строка - ФИО руководителя.
//				*** ИНН - Строка - ИНН руководителя.
//				*** ДатаЗаписи - Дата - дата записи о руководителе.
//		* КоличествоНайденных - Число - общее количество найденных контрагентов (может быть больше 20).
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыЮридическихЛицПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизаций = Новый Структура("РеквизитыОрганизаций,КоличествоНайденных,ОписаниеОшибки",
		Новый Массив, 0, Неопределено);
	
	ОписаниеОшибки = "";
	
	ИдентификаторСессии = ПолучитьИдентификаторСессииАпи();
	Если ИдентификаторСессии = Неопределено Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	//Запрос данных
	Соединение = ПолучитьСоединение(Ложь);
	ЗапросСервису = ПолучитьHTTPЗапрос("СПП", Новый Структура("Cookie", "sid="+ИдентификаторСессии));
	
	ДанныеКонтрагентов = НайтиКонтрагентовПоНаименованию(Соединение, ЗапросСервису, Наименование, 50);//ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
	Если ТипЗнч(ДанныеКонтрагентов) <> Тип("Соответствие") Тогда
		РеквизитыОрганизаций.КоличествоНайденных = 0;
		Возврат РеквизитыОрганизаций;
	КонецЕсли;
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов.Получить("result") Цикл
		ИНН = ДанныеКонтрагента.Значение.Получить("INN");
		Если лев(ИНН, СтрДлина(КодРегиона)) <> КодРегиона Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыОрганизации = РеквизитыЮридическогоЛицаПоИНН(ИНН, Соединение, ЗапросСервису); //?(СтрДлина(ИНН)=10, РеквизитыЮридическогоЛицаПоИНН(ИНН, Соединение, ЗапросСервису), РеквизитыПредпринимателяПоИНН(ИНН, Соединение, ЗапросСервису));
		РеквизитыОрганизаций.РеквизитыОрганизаций.Добавить(РеквизитыОрганизации);
	КонецЦикла;
	РеквизитыОрганизаций.КоличествоНайденных = РеквизитыОрганизаций.РеквизитыОрганизаций.Количество();

	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершен поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизаций;
	
КонецФункции

Процедура ПанельАдминистрированияБСППриСозданииНаСервереПосле(ЭтаФорма) Экспорт

	Элементы = ЭтаФорма.Элементы;
	
	//Отключаем видимость штатной группы формы
	Если Элементы.Найти(saby_ВызовСервераПереопределяемый.АдмБСП_ИмяГруппыСпарк()) <> Неопределено Тогда
		Элементы.БИПГруппаСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	
	//Добавляем вместо штатной свою группу, настраиваем свойства аналогично штатной
	РодительскийЭлемент = Элементы.Найти(saby_ВызовСервераПереопределяемый.АдмБСП_ИмяГруппыРодительДобавим());
	ПередЧемВставить = Элементы.Найти(saby_ВызовСервераПереопределяемый.АдмБСП_ИмяГруппыПередДобавим());
	ГруппаПроверки = Элементы.Вставить("sabyГруппаПроверкаКонтрагентов", Тип("ГруппаФормы"), РодительскийЭлемент, ПередЧемВставить);
	ГруппаПроверки.Заголовок = ИмяПрофиляСбис();
	ЗаполнитьЗначенияСвойств(ГруппаПроверки, Элементы.БИПГруппаСПАРКРиски, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость");
	
	//Вывод информации о сервисе
	ДобавляемыеРеквизиты = Новый Массив;
	РеквизитЛогин = Новый РеквизитФормы("sabyЛогин"					, Новый ОписаниеТипов("Строка"), , "Логин");
	ДобавляемыеРеквизиты.Добавить(РеквизитЛогин);
	РеквизитПароль = Новый РеквизитФормы("sabyПароль"				, Новый ОписаниеТипов("Строка"), , "Пароль");
	ДобавляемыеРеквизиты.Добавить(РеквизитПароль);
	РеквизитАдресСервера = Новый РеквизитФормы("sabyАдресСервера"	, Новый ОписаниеТипов("Строка"), , "Сервис");
	ДобавляемыеРеквизиты.Добавить(РеквизитАдресСервера);
	РеквизитТипОтчетов = Новый РеквизитФормы("sabyТипОтчетов"		, Новый ОписаниеТипов("Строка"), , "Стиль отчетов");
	ДобавляемыеРеквизиты.Добавить(РеквизитТипОтчетов);
	РеквизитБраузер = Новый РеквизитФормы("sabyБраузер"				, Новый ОписаниеТипов("Строка"), , "Показ карточки компании СБИС");
	ДобавляемыеРеквизиты.Добавить(РеквизитБраузер);
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	 	
	
	ДекорацияИнформацияСБИС = Элементы.Добавить("sabyИнформацияОСервисе", Тип("ДекорацияФормы"), ГруппаПроверки);
	ДекорацияИнформацияСБИС.Гиперссылка = Истина;
	ДекорацияИнформацияСБИС.Заголовок = "Информация о сервисе";
	ДекорацияИнформацияСБИС.УстановитьДействие("Нажатие", "ПерейтиПоСсылкеСБИС");
	
	ГруппаАвторизация = Элементы.Вставить("sabyГруппаАвторизация", Тип("ГруппаФормы"), ГруппаПроверки);
	ГруппаАвторизация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаАвторизация.Заголовок = "Параметры авторизации администратором";
	ГруппаАвторизация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаАвторизация.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Элементы.Добавить("sabyЛогинАпи", Тип("ПолеФормы"), ГруппаАвторизация);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = РеквизитЛогин.Имя;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииЛогинАпи");

	НовыйЭлемент = Элементы.Добавить("sabyПарольАпи", Тип("ПолеФормы"), ГруппаАвторизация);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = РеквизитПароль.Имя;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииПарольАпи");
	НовыйЭлемент.РежимПароля = Истина;
	
	НовыйЭлемент = Элементы.Добавить("sabyАдресСервера", Тип("ПолеФормы"), ГруппаАвторизация);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = РеквизитАдресСервера.Имя;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииАдресСервера");
	НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.СписокВыбора.Добавить("online.sbis.ru");
	НовыйЭлемент.СписокВыбора.Добавить("fix-online.sbis.ru");
	НовыйЭлемент.СписокВыбора.Добавить("test-online.sbis.ru");
	
	КомандаПроверки = ЭтаФорма.Команды.Добавить("ПроверитьЛогинПароль");
	КомандаПроверки.Действие = "sabyПроверитьПодключение";
	КомандаПроверки.Заголовок = "Проверить";
	КнопкаПроверитьПодключение = Элементы.Добавить("sabyПроверитьПодключение", Тип("КнопкаФормы"), ГруппаАвторизация);
	КнопкаПроверитьПодключение.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаПроверитьПодключение.ИмяКоманды = "ПроверитьЛогинПароль";
	
	ГруппаПрочиеНастройки = Элементы.Вставить("sabyГруппаПрочиеНастройки", Тип("ГруппаФормы"), ГруппаПроверки);
	ГруппаПрочиеНастройки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПрочиеНастройки.Заголовок = "Прочие настройки";
	ГруппаПрочиеНастройки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПрочиеНастройки.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НовыйЭлемент = Элементы.Добавить("sabyТипОтчетов", Тип("ПолеФормы"), ГруппаПрочиеНастройки);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = РеквизитТипОтчетов.Имя;
	НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.СписокВыбора.Добавить("СБИС");
	НовыйЭлемент.СписокВыбора.Добавить("1С");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииТипОтчетов");

	НовыйЭлемент = Элементы.Добавить("sabyБраузер", Тип("ПолеФормы"), ГруппаПрочиеНастройки);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = РеквизитБраузер.Имя;
	НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.СписокВыбора.Добавить("Браузер");
	НовыйЭлемент.СписокВыбора.Добавить("Форма 1С");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииБраузер");
	
	ДекорацияКатегорииКонтрагентов = Элементы.Добавить("sabyОткрытьКатегорииКонтрагентов", Тип("ДекорацияФормы"), ГруппаПрочиеНастройки);
	ДекорацияКатегорииКонтрагентов.Гиперссылка = Истина;
	ДекорацияКатегорииКонтрагентов.Заголовок = "Категории контрагентов";
	ДекорацияКатегорииКонтрагентов.УстановитьДействие("Нажатие", "ОткрытьКатегорииКонтрагентов");
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтаФорма["sabyЛогин"]			= ПолучитьЛогинАпи();
	ЭтаФорма["sabyПароль"]			= ПолучитьПарольАпи();
	ЭтаФорма["sabyАдресСервера"]	= АдресСервера();
	ЭтаФорма["sabyТипОтчетов"]		= ПолучитьТипИспользуемыхОтчетов();
	ЭтаФорма["sabyБраузер"]			= ПолучитьБраузерКарточкиКомпании();
	УстановитьПривилегированныйРежим(Ложь);


КонецПроцедуры

Процедура СоздатьЭлементыИндикатораНадежности(Форма, ИмяРодительскогоЭлемента, ВертикальнаяГруппа, ОтображатьЗаголовок=Истина) Экспорт

	ОписаниеТипаРеквизитов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоложительныйРейтинг", ОписаниеТипаРеквизитов, , "Положительный рейтинг", Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтрицательныйРейтинг", ОписаниеТипаРеквизитов, , "Отрицательный рейтинг", Ложь));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элементы = Форма.Элементы;
	ГруппаНадежность = Элементы.Вставить("ГруппаСБИСНадежность", Тип("ГруппаФормы"), Элементы[ИмяРодительскогоЭлемента]);
	ГруппаНадежность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНадежность.РазрешитьИзменениеСостава	= Ложь;
	ГруппаНадежность.ОтображениеПодсказки		= ОтображениеПодсказки.Нет;
	ГруппаНадежность.Группировка				= ?(ВертикальнаяГруппа, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ГруппаНадежность.Отображение				= ОтображениеОбычнойГруппы.Нет;
	ГруппаНадежность.ОтображатьЗаголовок		= Ложь;
	ГруппаНадежность.ВертикальныйИнтервал		= ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаНадежность.ГоризонтальныйИнтервал		= ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаНадежность.Видимость					= Ложь;
	Если ОтображатьЗаголовок Тогда
		ЗаголовокИндикаторов = Элементы.Добавить("ЗаголовокИндикторов", Тип("ДекорацияФормы"), ГруппаНадежность);
		ЗаголовокИндикаторов.Вид = ВидДекорацииФормы.Надпись;
		ЗаголовокИндикаторов.Заголовок ="Надёжность: ";
	КонецЕсли;
	
	Декорация							= Элементы.Добавить("ДекорацияИндикаторНадежности", Тип("ДекорацияФормы"), ГруппаНадежность);
	Декорация.Вид						= ВидДекорацииФормы.Картинка;
	Декорация.РастягиватьПоВертикали	= Ложь;
	Декорация.РастягиватьПоГоризонтали	= Ложь;
	Декорация.Рамка						= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Декорация.Подсказка					= "Индикатор надёжности. Кликните для получения подробной информации";
	Декорация.Картинка					= БиблиотекаКартинок.saby_Градусник00;
	Декорация.Гиперссылка				= Истина;
	Декорация.ОтображениеПодсказки		= ОтображениеПодсказки.Всплывающая;
	Декорация.УстановитьДействие("Нажатие", "saby_ИндикаторСБИСНажатие");
	Декорация.ПропускатьПриВводе		= Истина;
	
	Декорация						= Элементы.Добавить("ДекорацияПоказать", Тип("ДекорацияФормы"), ГруппаНадежность);//ГруппаИндикаторы);
	Декорация.Вид					= ВидДекорацииФормы.Надпись;
	Декорация.Подсказка				= "Индикатор надёжности. Кликните для получения подробной информации";
	Декорация.УстановитьДействие("Нажатие", "saby_ДекорацияПоказатьНажатие");
	Декорация.Заголовок				= " ...Обновление...";
	Декорация.Гиперссылка			= Истина;

КонецПроцедуры

// Проверяем, подключен ли сервис СПАРК. Если подключен, то отключим его
// возможно только под пользователями с полными правами. Права есть у установившего расширение
//
Процедура ОтключитьСПАРК() Экспорт

	Если РольДоступна("АдминистраторСистемы") Или РольДоступна("ПолныеПрава") Тогда
		Если Константы.ИспользоватьСервисСПАРКРиски.Получить() Тогда
			Константы.ИспользоватьСервисСПАРКРиски.Установить(Ложь);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ОтключитьСПАРК()

Функция СведенияОРегламентнойОбработке(ИмяОбработки) Экспорт

	Если ИмяОбработки = ИмяОбработкиСБИС() Тогда
		ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2");
		ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.БезопасныйРежим = Ложь;
		
		ПараметрыРегистрации.Наименование = "Отправить документ через online.sbis.ru";
		ПараметрыРегистрации.Информация = "Обмен документами в электронном виде";
		
		
		строкаКоманды = ПараметрыРегистрации.Команды.Добавить();
		строкаКоманды.Идентификатор = "1";
		строкаКоманды.Представление = "Обмен электронными документами СБИС";
		строкаКоманды.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		
	ИначеЕсли ИмяОбработки = ИмяРегламентнойОбработки() Тогда
		ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("1.0.1.1");
		ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.БезопасныйРежим = Ложь;
		
		ПараметрыРегистрации.Наименование = "Автоматический обмен данными с online.sbis.ru";
		ПараметрыРегистрации.Информация = "Запускает автоматический обмен данными СБИС";
		
		строкаКоманды = ПараметрыРегистрации.Команды.Добавить();
		строкаКоманды.Идентификатор = "Автообмен";
		строкаКоманды.Представление = "Регламентный обмен СБИС";
		строкаКоманды.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Иначе
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	

КонецФункции // СведенияОРегламентнойОбработке()

Процедура УстановитьОбновитьВнешниеОбработки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить() Тогда
		Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	КонецЕсли;
	//Установка/настройка регламентной обработки
	ДопОбработка = УстановитьОбновитьВнешнююОбработку(ИмяРегламентнойОбработки(), "Регламентный обмен СБИС", Истина);
	//Если отключено или не было создано расписание выполнения, инициируем его
	КомандаЗапуска = ДопОбработка.Команды[0];
	ГуидЗадания = КомандаЗапуска.РегламентноеЗаданиеGUID;
	РегламентноеЗадание = Неопределено;
	Если ЗначениеЗаполнено(ГуидЗадания) Тогда
		//РегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ГуидЗадания);
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ГуидЗадания);
	КонецЕсли;
	Если РегламентноеЗадание = Неопределено Тогда
		РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
		РегламентноеЗадание.Наименование = "Дополнительная обработка: Регламентный обмен СБИС / Команда: Регламентный обмен СБИС";
		РегламентноеЗадание.Параметры.Добавить(ДопОбработка.Ссылка);
		РегламентноеЗадание.Параметры.Добавить("Автообмен");
		РасписаниеЗадания = РегламентноеЗадание.Расписание;
		РасписаниеЗадания.ПериодПовтораДней = 1;
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 3600*24*7; //Раз в неделю
		РегламентноеЗадание.Использование = Истина;
		
		НачатьТранзакцию();
		РегламентноеЗадание.Записать();
		КомандаЗапуска.РегламентноеЗаданиеGUID = РегламентноеЗадание.УникальныйИдентификатор;
		ДопОбработка.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//Установка/настройка внешней обработки СБИС
	ДопОбработка = УстановитьОбновитьВнешнююОбработку(ИмяОбработкиСБИС(), "Электронный обмен документами в СБиС", Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьСоздатьПрофильДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ПрофилиГруппДоступаРоли.Ссылка.Наименование,
		|	ПрофилиГруппДоступаРоли.Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Роль.Имя = ""saby_ОсновнаяРоль""";
	ТаблицаПрофилей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаПрофилей.Количество() = 0 Тогда
		//Создаем новый профиль
		НовыйПрофиль = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		НовыйПрофиль.Наименование = ИмяПрофиляСбис();
		РольПрофиля = НовыйПрофиль.Роли.Добавить();
		РольПрофиля.Роль = Справочники.ИдентификаторыОбъектовРасширений.НайтиПоНаименованию(ИмяПрофиляСбис() + " (Роль)");
		НазначениеПрофиля = НовыйПрофиль.Назначение.Добавить();
		Попытка
			НовыйПрофиль.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПроверитьСоздатьПрофильДоступа()

Функция АвторизоватьсяПоЛогинуПаролю(Логин, Пароль, ТекстОшибки, Отказ=Ложь, АвторизацияОнлайн=Истина) Экспорт 	
	
	Соединение = ПолучитьСоединение(АвторизацияОнлайн);
	ЗапросСервису = ПолучитьHTTPЗапрос("Авторизация", , Новый Структура("АвторизацияОнлайн, Логин, Пароль", АвторизацияОнлайн, Логин, Пароль));
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	РезультатЗапроса = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	
	Результат = "";
	Если РезультатЗапроса.Свойство("result", Результат) Тогда
		Возврат Результат;
	ИначеЕсли РезультатЗапроса.Свойство("error", Результат) Тогда
		Отказ = Истина;
		Если Результат.details = "Для входа введите полученный код подтверждения." Тогда
			Результат.message = "Требуется подтверждение действия";
			Результат.code = 303;
		КонецЕсли;
			ТекстОшибки = Результат.details;
	Иначе
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",100,"Не удалось авторизоваться по логину/паролю.","");
		ТекстОшибки = "Не удалось авторизоваться по логину/паролю.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция АутентификацияАдминистратором(Отказ=Ложь) Экспорт 	
	
	ДанныеСотрудника = СформироватьДанныеТекущегоПользователя();
	
	ИдСотрИС = ДанныеСотрудника.Сотрудник.ИдентификаторИС;
	Если ИдСотрИС = "00000000-0000-0000-0000-000000000000" Тогда
		Отказ = Истина;
		Возврат "Не удалось получить идентификатор сотрудника. Возможно текущий пользователь 1С не связан с физическим лицом.";
	КонецЕсли;
	
	идСессии = ПолучитьИдентификаторСессииОнлайн();
	Если идСессии = "" Тогда
		//Авторизация администратора не удалась
		Отказ = Истина;
		Возврат "Не удалось пройти авторизацию администратора. Проверьте настройки в разделе ""Администрирование - Интернет-поддержка и сервисы"".";
	КонецЕсли;
	
	Соединение = ПолучитьСоединение(Истина);
	ЗапросСервису = ПолучитьHTTPЗапрос("Сервис1", Новый Структура("Cookie", "sid="+идСессии));
	ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("User.GetTokenByExternalId", Новый Структура("ExternalId", ИдСотрИС)));
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Отказ = Истина;
		Возврат "Не удалось получить данные пользователя СБИС.";
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	ТокенПользователя = СтруктураРезультата.result;
	Если ТокенПользователя = Неопределено Тогда
		СтруктураПараметра = Новый Структура("Параметр",Новый Структура("Сотрудник", Новый Структура("ИдентификаторИС", ИдСотрИС)));
		//Не нашли пользователя по гуид 1С
		ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("СБИС.ПрочитатьСотрудника", СтруктураПараметра));
		ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
		Если ОтветАвторизации.КодСостояния <> 200 Тогда
			Отказ = Истина;
			Возврат "Не удалось прочитать сотрудника СБИС.";
		КонецЕсли;
		ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
		СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
		
		Если СтруктураРезультата.Свойство("error") И СтруктураРезультата.error.Свойство("message") И Лев(СтруктураРезультата.error.message, 54) = "Не удалось найти сотрудника по внешнему идентификатору" Тогда
			
			//Сотрудника не нашли. Создаем нового в СБИС
			ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("СБИС.ЗаписатьСотрудника", Новый Структура("Параметр", ДанныеСотрудника)));
			ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
			Если ОтветАвторизации.КодСостояния <> 200 Тогда
				Отказ = Истина;
				Возврат "Не удалось прочитать сотрудника СБИС.";
			КонецЕсли;
			ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
			СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			Если СтруктураРезультата.Свойство("error") И Лев(СтруктураРезультата.error.message, 30) = "В справочнике ролей не найдены" Тогда
				Отказ = Истина;
				Возврат "Ошибка создания пользователя СБИС. " + СтрЗаменить(СтрЗаменить(СтруктураРезультата.error.message, "{", ""), "}", "");
			КонецЕсли;
			
			ИдСотрудникаСБИС = СтруктураРезультата.result.Сотрудник.Идентификатор;
			
			ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("User.LinkExternalUser", Новый Структура("ExternalId, FaceId", ИдСотрИС, ИдСотрудникаСБИС)));
			ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
			Если ОтветАвторизации.КодСостояния <> 200 Тогда
				Отказ = Истина;
				Возврат "Не удалось связать сотрудников 1С и СБИС!";
			КонецЕсли;
			ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
			СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
			Если СтруктураРезультата.Свойство("error") Тогда
				Отказ = Истина;
				ДанныеОшибки = СтруктураРезультата.error;
				Возврат ДанныеОшибки.message +?(ДанныеОшибки.details = ДанныеОшибки.message, "", (" "+ ДанныеОшибки.details));
			КонецЕсли;
		КонецЕсли;
		
		//Пользователь СБИС создан и связан с пользователем 1С. Запросим токен еще раз
		ЗапросСервису = ПолучитьHTTPЗапрос("Сервис1", Новый Структура("Cookie", "sid="+идСессии));
		ЗапросСервису.УстановитьТелоИзСтроки(СформироватьТекстЗапроса("User.GetTokenByExternalId", Новый Структура("ExternalId", ИдСотрИС)));
		ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
		Если ОтветАвторизации.КодСостояния <> 200 Тогда
			Отказ = Истина;
			Возврат "Не удалось получить данные пользователя СБИС.";
		КонецЕсли;
		ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
		СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
		ТокенПользователя = СтруктураРезультата.result;
		Если ТокенПользователя = Неопределено Тогда
			Отказ = Истина;
			Возврат "Не удалось получить токен для авторизации в СБИС.";
		КонецЕсли;
	КонецЕсли;
	
	ЗапросСервису = ПолучитьHTTPЗапрос("Токен", , ТокенПользователя);
	ОтветАвторизации = Соединение.ОтправитьДляОбработки(ЗапросСервису);
	Если ОтветАвторизации.КодСостояния <> 200 Тогда
		Отказ = Истина;
		Возврат "Неверный код ответа при получении токена";
	КонецЕсли;
	ТекстОтвета = ОтветАвторизации.ПолучитьТелоКакСтроку();
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТекстОтвета);
	СтруктураРезультата = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	Если Не СтруктураРезультата.Свойство("result") Тогда
		Отказ = Истина;
		Возврат "Не удалось получить пользователя СБИС";
	КонецЕсли;
	
	Возврат СтруктураРезультата.result;
	
КонецФункции

#КонецОбласти
	
